# for문의 기본 구조
# for 변수 in 리스트(or 튜플, 문자열):
#   수행할 문장1
#   수행할 문장2
#   ...
# 리스트나 튜플, 문자열의 첫 번째 요소부터 마지막 요소까지 차례로 변수에 대입되어
# "수행할 문장1", "수행할 문장2" 등이 수행된다

# 에제를 통해 for문 이해하기
# 1. 대표적인 for문
test_list = ['aaa', 'bbb', 'ccc']
for i in test_list:
    print(i)

# test_list의 첫 번째 요소인 aaa가 먼저 i 변수에 대입된 후
# print(i) 문장을 수행, 다음에 두 번째 요소 bbb가 i 변수에 대입된 후
# print(i) 문장을 수행하고 리스트의 마지막 요소 ccc 까지 for문이 반복된다

# 2. 다양한 for문의 사용
t = [(1, 2), (3, 4), (5,6)]
for (first, last) in t:
    print(first + last)

# 3
# 7
# 11
# t라는 리스트의 요소가 튜플의 형태이다
# 각 요소가 자동으로 (first, last) 변수에 대입된다
# 즉, (first, last) = (1, 2)

# 3. for문의 응용
# for문은 다음과 같은 문제를 해결할 수 있다
# 총 5명의 학생이 시험을 보았다
# 시험 점수가 60점을 넘으면 합격, 그렇지 않으면 불합격이다
# 합격/불합격 결과를 나타내라

# 먼저 학생들의 점수를 리스트에 담는다
scores = [90, 55, 65, 50, 85]
number = 0 # 각 학생들의 번호를 매기기 위한 변수

for score in scores:
    number += 1
    if score >= 60:
        print("%d번 학생은 합격입니다." % number)
    else :
        print("%d번 학생은 불합격입니다." % number)


# for문과 continue
# for문 안의 문장을 수행하는 도중 continue 문을 만나면 for문의 처음으로 돌아간다
# 위 문제를 응용하여 60점 이상인 사람에게는 축하 메시지를, 
# 그렇지 않은 사람에게는 아무 메시지도 남기지 않는 프로그램 작성

scores = [90, 55, 65, 50, 85]
number = 0

for score in scores:
    number += 1
    if score < 60 :
        continue
    print("%d번 학생, 합격을 축하합니다!" % number)

# 점수가 60점 미만인 경우, score < 60 문장이 참이 되어 continue문이 수행된다
# 즉, 아래의 print문이 아니라 처음으로 돌아가고 60점 이상인 경우 
# if 문이 거짓이 되기 떄문에 continue문이 아니라 print문으로 바로 넘어가 
# 축하 메시지를 출력하게 된다

# for문과 함께 자주 사용되는 range 함수
# for문은 숫자 리스트를 자동으로 만들어주는 range 함수와 함께 사용하는 경우가 많다

a = range(10)
print(a) # range(0, 10)
# range(10)은 0부터 9, 즉 10 미만의 숫자까지 포함하는 range 객체를 만든다
# range(시작 숫자, 끝 숫자)에서 끝 숫자는 포함되지 않는 것에 주의!
# 위 a 변수는 0에서 9까지만을 포함하는 range이다

# range 함수의 예시
# for와 range 함수를 사용하면 1부터 10까지 더하는 것을 다음과 같이 구현할 수 있다
add = 0
for i in range(1, 11):
    add += i

print(add) # 55

# range(1, 11)은 숫자 1부터 10까지의 숫자를 데이터로 갖는 객체이다
# 따라서 위 에에서 i 변수에 리스트의 숫자가 1부터 10까지 하나씩 차례로 대입되면서
# add += i (add = add + i) 문장을 반복적으로 수행되고
# 최종적으로 add는 1부터 10까지를 더한 값인 55가 된다

# 축하메시지를 출력하는 문제에서도 range를 활용할 수 있다
scores = [90, 55, 65, 50, 85]

for number in range(len(scores)):
    if scores[number] < 60 :
        continue
    print("%d번 학생, 합격을 축하합니다!" % (number + 1))

# len() 함수는 리스트 안의 요소 "개수"를 돌려주는 함수이다
# 따라서 len(scores)는 5가 되고, 이는 range(5)를 의미한다
# range(5)는 0부터 4까지를 의미하고, 이는 number에 대입된다(0, 1, 2, 3, 4)
# 1번부터 시작하므로 %d 번호 자리에 number에 1을 더한 값을 넣어준다

# for와 range를 이용한 구구단
for i in range(2, 10):
    for j in range(1, 10):
        print(i*j, end = " ")
    print("\n")

# 2 4 6 8 10 12 14 16 18
# 3 6 9 12 15 18 21 24 27
# 4 8 12 16 20 24 28 32 36
# 5 10 15 20 25 30 35 40 45
# 6 12 18 24 30 36 42 48 54
# 7 14 21 28 35 42 49 56 63
# 8 16 24 32 40 48 56 64 72
# 9 18 27 36 45 54 63 72 81

# end와 print(" ")은 출력형태를 좀 더 깔끔하게 하기 위해서 사용했다
# end = " " end 파라미터는 해당 결괏값을 출력할 때 다음줄로 넘기지 않고 그 줄에 계속 출력하기 위해 사용
# print(" ")는 2단, 3단 등을 구분하기 위해 두 번째 for문이 끝나면 결괏값을 다시 다음 줄부터 출력하게 해 준다
# print(" ") 문장이 없으면 2단부터 9단까지 같은 줄에 출력이 된다
# print("\n") 공백 대신 개행 문자를 넣으면 아래와 같이 빈 줄이 사이사이에 위치한다.
# 2 4 6 8 10 12 14 16 18

# 3 6 9 12 15 18 21 24 27

# 4 8 12 16 20 24 28 32 36

# 5 10 15 20 25 30 35 40 45

# 6 12 18 24 30 36 42 48 54

# 7 14 21 28 35 42 49 56 63

# 8 16 24 32 40 48 56 64 72

# 9 18 27 36 45 54 63 72 81

# 리스트 내포(List, Comprehension) 사용하기
# list 안에 for문을 포함하는 list comprehension을 사용하면
# 좀 더 편리하고 직관적인 프로그램을 작성할 수 있다

young = [1, 2, 3, 4]
result = []

for y in young:
    result.append(y*3)

print(result) # [3, 6, 9, 12]

# 위 코드는 young 리스트의 각 요소에 3을 곱한 결과를 
# result라는 비어 있는 리스트에 담는 코드이다

# list comprehension을 사용하면 더 간결하게 작성 가능하다
young = [1, 2, 3, 4]
result = [y * 3 for y in young]
print(result) # [3, 6, 9, 12]

# 만약 리스트 요소 중 짝수에만 3을 곱하고 싶다면?
# list comprehension 안에서 if문을 아래와 같이 작성한다

young = [1, 2, 3, 4]
result = [y * 3 for y in young if y % 2 == 0]
print(result) # [6, 12]

# list comprehension의 일반적인 문법
# [표현식 for 항목 in 반복가능한객체 if 조건문(생략가능)]

# for문을 2개 이상 사용하는 것도 디음과 같이 가능하다(중첩 for문)

# [표현식 for 항목1 in 반복가능한객체1 if 조건문 1
#         for 항목2 in 반복가능한객체2 if 조건문 2
#         ...
#         for 항목n in 반복가능한객체n if 조건문 n]

# 구구단을 list comprehension을 사용하여 구현해보자
result = [x * y for x in range(2, 10)
                for y in range(1, 10)]

print(result)
# [2, 4, 6, 8, 10, 12, 14, 16, 18, 3, 6, 9, 12, 15, 18, 21, 24, 27, 4, 8, 12, 16, 20, 24, 28, 32, 36, 
# 5, 10, 15, 20, 25, 30, 35, 40, 45, 6, 12, 18, 24, 30, 36, 42, 48, 54, 7, 14, 21, 28, 35, 42, 49, 56, 
# 63, 8, 16, 24, 32, 40, 48, 56, 64, 72, 9, 18, 27, 36, 45, 54, 63, 72, 81]


